#!/usr/bin/env python3
"""
Build-Skript f√ºr Sequoia TrackNamer GUI
Erstellt eine optimierte ausf√ºhrbare Datei
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def clean_build_files():
    """L√∂sche alte Build-Dateien"""
    print("üßπ L√∂sche alte Build-Dateien...")
    
    dirs_to_remove = ['dist', 'build', '__pycache__']
    files_to_remove = ['*.spec']
    
    for dir_name in dirs_to_remove:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"   ‚úì {dir_name}/ gel√∂scht")
    
    # Spec-Dateien l√∂schen
    for spec_file in Path('.').glob('*.spec'):
        spec_file.unlink()
        print(f"   ‚úì {spec_file} gel√∂scht")

def check_icon():
    """Pr√ºfe ob Icon verf√ºgbar ist"""
    icon_path = "icons/icon.ico"
    if not os.path.exists(icon_path):
        print(f"‚ö†Ô∏è  Icon nicht gefunden: {icon_path}")
        print("   Verwende Standard-Icon")
        return None
    return icon_path

def build_exe():
    """Erstelle die ausf√ºhrbare Datei"""
    print("\nüî® Erstelle ausf√ºhrbare Datei...")
    
    # PyInstaller-Kommando
    cmd = [
        'pyinstaller',
        '--onefile',                    # Alles in eine Datei
        '--windowed',                   # Kein Konsolen-Fenster
        '--name', 'Sequoia_TrackNamer_GUI',  # Name der .exe
        '--clean',                      # Cache leeren
        '--noconfirm',                  # √úberschreiben ohne Nachfrage
    ]
    
    # Icon hinzuf√ºgen falls verf√ºgbar
    icon_path = check_icon()
    if icon_path:
        cmd.extend(['--icon', icon_path])
    
    # Hauptdatei
    cmd.append('tracknamer_gui_new.py')
    
    print(f"   Kommando: {' '.join(cmd)}")
    print("   Bitte warten...")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print("   ‚úÖ Build erfolgreich!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå Build-Fehler: {e}")
        print(f"   Ausgabe: {e.stdout}")
        print(f"   Fehler: {e.stderr}")
        return False

def check_result():
    """Pr√ºfe das Ergebnis"""
    exe_path = Path('dist/Sequoia_TrackNamer_GUI.exe')
    
    if exe_path.exists():
        size_mb = exe_path.stat().st_size / (1024 * 1024)
        print(f"\n‚úÖ Erfolgreich erstellt!")
        print(f"   üìÅ Pfad: {exe_path.absolute()}")
        print(f"   üìè Gr√∂√üe: {size_mb:.1f} MB")
        
        # Test-Start anbieten
        print("\nüöÄ M√∂chten Sie die .exe-Datei testen? (j/n)")
        if input().lower().startswith('j'):
            try:
                subprocess.Popen(str(exe_path))
                print("   ‚úì .exe-Datei gestartet")
            except Exception as e:
                print(f"   ‚ùå Fehler beim Starten: {e}")
    else:
        print("\n‚ùå .exe-Datei wurde nicht erstellt!")
        return False
    
    return True

def main():
    """Haupt-Build-Prozess"""
    print("=" * 50)
    print("  Sequoia TrackNamer GUI - Build Script")
    print("=" * 50)
    
    # Arbeitsverzeichnis pr√ºfen
    if not os.path.exists('tracknamer_gui_new.py'):
        print("‚ùå tracknamer_gui_new.py nicht gefunden!")
        print("   Bitte im richtigen Verzeichnis ausf√ºhren.")
        sys.exit(1)
    
    # Build-Prozess
    clean_build_files()
    
    if build_exe():
        check_result()
        print("\nüéâ Build abgeschlossen!")
    else:
        print("\nüí• Build fehlgeschlagen!")
        sys.exit(1)

if __name__ == "__main__":
    main()